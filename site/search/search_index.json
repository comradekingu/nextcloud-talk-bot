{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Nextcloud Talk Bot is a powerful tool that enhances the functionality of Nextcloud Talk by allowing users to interact with the bot to perform various tasks. This documentation will guide you through the process of setting up the bot, configuring it, and using its features. Table of Contents Requirements Installation Configuration Usage Commands Contributing License Requirements To use the Nextcloud Talk Bot, you will need: A Nextcloud instance with the Talk app installed A bot user with apppassword setup Python 3.7 or higher","title":"Home"},{"location":"#requirements","text":"To use the Nextcloud Talk Bot, you will need: A Nextcloud instance with the Talk app installed A bot user with apppassword setup Python 3.7 or higher","title":"Requirements"},{"location":"NextcloudFileOperations/","text":"NextcloudFileOperations is designed to interact with a Nextcloud server, providing functionality to list, upload, and delete files in a user's Nextcloud folder. Initialization: To create an instance of the NextcloudTalkExtractor class, you will need the following information: - base_url: The base URL for the Nextcloud server. - username: The username for the Nextcloud user account. - password: The password for the Nextcloud user account. - nc_remote_folder: (Optional) The path of the remote folder on the Nextcloud server. - local_folder: (Optional) The path of the local folder on the user's machine. - remote_file: (Optional) The name of the remote file in the Nextcloud folder. Methods: list_files_in_nextcloud_folder() Purpose: Lists all files in a Nextcloud folder Returns: A list containing names of the files in the folder. send_local_file_to_nextcloud_folder() Purpose: Uploads local files to a specified Nextcloud folder. This method iterates through all the files in the local folder, uploads each file to the specified Nextcloud folder, and deletes the local file upon successful upload. delete_remote_file_in_nextcloud() Purpose: Deletes a remote file in the specified Nextcloud folder. This method sends a DELETE request to the Nextcloud server to remove the remote file located in the user's specified folder.","title":"NextcloudFileOperations"},{"location":"NextcloudFileOperations/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: - base_url: The base URL for the Nextcloud server. - username: The username for the Nextcloud user account. - password: The password for the Nextcloud user account. - nc_remote_folder: (Optional) The path of the remote folder on the Nextcloud server. - local_folder: (Optional) The path of the local folder on the user's machine. - remote_file: (Optional) The name of the remote file in the Nextcloud folder.","title":"Initialization:"},{"location":"NextcloudFileOperations/#methods","text":"list_files_in_nextcloud_folder() Purpose: Lists all files in a Nextcloud folder Returns: A list containing names of the files in the folder. send_local_file_to_nextcloud_folder() Purpose: Uploads local files to a specified Nextcloud folder. This method iterates through all the files in the local folder, uploads each file to the specified Nextcloud folder, and deletes the local file upon successful upload. delete_remote_file_in_nextcloud() Purpose: Deletes a remote file in the specified Nextcloud folder. This method sends a DELETE request to the Nextcloud server to remove the remote file located in the user's specified folder.","title":"Methods:"},{"location":"NextcloudTalkExtractor/","text":"The NextcloudTalkExtractor class is a utility for interacting with the Nextcloud Talk API and extracting data. It provides methods for fetching conversations, participants, and messages for an authenticated user. Initialization: To create an instance of the NextcloudTalkExtractor class, you will need the following information: - base_url: The base URL for the Nextcloud server. - username: The username for the Nextcloud user account. - password: The password for the Nextcloud user account. - room_id (optional): The room token for the Nextcloud chat group. - message_limit (optional): The default maximum number of messages to retrieve. Methods: get_conversations_ids() Purpose: Fetch the list of conversations for the authenticated user. Returns: A dictionary containing the list of conversation tokens and names. get_participants(room_id, message_limit=None) Purpose: Fetch the list of participants in a specific conversation. Parameters: - room_id: The token of the conversation for which to retrieve participants. Returns: A list containing the participant display names. get_messages(room_id, message_limit=1) Purpose: Fetch the messages in a specific conversation, with an optional limit. Parameters: - room_id: The token of the conversation for which to retrieve messages. - message_limit: The maximum number of messages to retrieve (default: 100). Returns: A list containing the messages as strings. Example Usage: from nextcloud_talk_extractor import NextcloudTalkExtractor base_url = \"https://my.nextcloud.com\" username = \"my_username\" password = \"my_password\" extractor = NextcloudTalkExtractor(base_url, username, password) # Get the list of conversations conversations = extractor.get_conversations_ids() print(conversations) # Get the participants of a specific conversation room_id = \"conversation_token\" participants = extractor.get_participants(room_id) print(participants) # Get the messages of a specific conversation messages = extractor.get_messages(room_id, message_limit=100) print(messages)","title":"NextcloudTalkExtractor"},{"location":"NextcloudTalkExtractor/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: - base_url: The base URL for the Nextcloud server. - username: The username for the Nextcloud user account. - password: The password for the Nextcloud user account. - room_id (optional): The room token for the Nextcloud chat group. - message_limit (optional): The default maximum number of messages to retrieve.","title":"Initialization:"},{"location":"NextcloudTalkExtractor/#methods","text":"get_conversations_ids() Purpose: Fetch the list of conversations for the authenticated user. Returns: A dictionary containing the list of conversation tokens and names. get_participants(room_id, message_limit=None) Purpose: Fetch the list of participants in a specific conversation. Parameters: - room_id: The token of the conversation for which to retrieve participants. Returns: A list containing the participant display names. get_messages(room_id, message_limit=1) Purpose: Fetch the messages in a specific conversation, with an optional limit. Parameters: - room_id: The token of the conversation for which to retrieve messages. - message_limit: The maximum number of messages to retrieve (default: 100). Returns: A list containing the messages as strings.","title":"Methods:"},{"location":"NextcloudTalkExtractor/#example-usage","text":"from nextcloud_talk_extractor import NextcloudTalkExtractor base_url = \"https://my.nextcloud.com\" username = \"my_username\" password = \"my_password\" extractor = NextcloudTalkExtractor(base_url, username, password) # Get the list of conversations conversations = extractor.get_conversations_ids() print(conversations) # Get the participants of a specific conversation room_id = \"conversation_token\" participants = extractor.get_participants(room_id) print(participants) # Get the messages of a specific conversation messages = extractor.get_messages(room_id, message_limit=100) print(messages)","title":"Example Usage:"}]}