{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents Requirements Installation Configuration Usage Class Diagram Contributing License Requirements To use the Nextcloud Talk Bot, you will need: A Nextcloud instance with the Talk app installed A bot user with apppassword setup Python 3.7 or higher Pip modules: \"cryptography\" and \"requests\" Installation Via PIP: pip install nextcloudtalkbot or manually: Clone this repository: git clone https://github.com/sowoi/nextcloud-talk-bot.git Not a developer? There is a fully automated bash script that you can run on your NextcloudServer to do the installation and configuration: See Commands . For those who don't want to use a bash script, there is also an Ansible script: See AnsiblePlaybook . Configuration There is an interactive script which guides you through the configuration, see FirstRunSetup Usage The FirstRunSetup does not have to be performed, but it makes it easier to use. from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot bot = NextcloudTalkBot() url = bot.NEXTCLOUD_URL username = bot.USERNAME password = bot.PASSWORD user = NextcloudUser(url, username, password) preferred_language = user.get_preferred_language() Class Diagram Contributing Create a PullRequest on the Git . You are also welcome to translate. Contact me via my website . License Licensed under the terms of GNU General Public License v3.0.","title":"Index"},{"location":"#table-of-contents","text":"Requirements Installation Configuration Usage Class Diagram Contributing License","title":"Table of Contents"},{"location":"#requirements","text":"To use the Nextcloud Talk Bot, you will need: A Nextcloud instance with the Talk app installed A bot user with apppassword setup Python 3.7 or higher Pip modules: \"cryptography\" and \"requests\"","title":"Requirements"},{"location":"#installation","text":"Via PIP: pip install nextcloudtalkbot or manually: Clone this repository: git clone https://github.com/sowoi/nextcloud-talk-bot.git Not a developer? There is a fully automated bash script that you can run on your NextcloudServer to do the installation and configuration: See Commands . For those who don't want to use a bash script, there is also an Ansible script: See AnsiblePlaybook .","title":"Installation"},{"location":"#configuration","text":"There is an interactive script which guides you through the configuration, see FirstRunSetup","title":"Configuration"},{"location":"#usage","text":"The FirstRunSetup does not have to be performed, but it makes it easier to use. from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot bot = NextcloudTalkBot() url = bot.NEXTCLOUD_URL username = bot.USERNAME password = bot.PASSWORD user = NextcloudUser(url, username, password) preferred_language = user.get_preferred_language()","title":"Usage"},{"location":"#class-diagram","text":"","title":"Class Diagram"},{"location":"#contributing","text":"Create a PullRequest on the Git . You are also welcome to translate. Contact me via my website .","title":"Contributing"},{"location":"#license","text":"Licensed under the terms of GNU General Public License v3.0.","title":"License"},{"location":"AnsiblePlaybook/","text":"Nextcloud Talk Bot: Setup via Ansible This Ansible playbook playbook.yml sets up a Nextcloud Talk bot on your Nextcloud server. Overview The playbook performs the following tasks: Ensure the installation directory exists. Create a Python virtual environment. Install the NextcloudTalkBot package in the virtual environment. Download the ncbot.py script from Github. Create the ncbot.sh script. Set the ownership of the ncbot.py and ncbot.sh files. Add the Nextcloud Talk command. Run the first-time setup for the bot. Variables The playbook uses the following variables: install_directory: The path to the directory where the bot will be installed. nextcloud_directory: The path to the Nextcloud installation directory. response: The response mode for the bot (default 2: send system messages). enabled: The enabled state for the bot command (default 2: enabled for all user). Tasks Ensure install directory exists This task creates the installation directory if it does not exist. Create virtual environment This task creates a Python virtual environment in the installation directory. Install NextcloudTalkBot in virtual environment This task installs the nextcloudtalkbot package in the virtual environment. Download ncbot.py from Github This task downloads the ncbot.py script from the Github repository and saves it in the installation directory with executable permissions. Create ncbot.sh This task creates the ncbot.sh script in the installation directory, which is a wrapper around the ncbot.py script. The script sets the correct virtual environment and Python interpreter. Set ownership of ncbot files This task sets the ownership of the ncbot.py and ncbot.sh files to the www-data user and group. Add Nextcloud Talk command This task adds the Nextcloud Talk command using the occ command-line tool. The command is registered with the bot's script, response mode, and enabled state. Run first-time setup This task runs the first-time setup for the bot by calling the ncbot.sh script with the --setup flag. The setup process configures the bot for the Nextcloud Talk instance.","title":"Setup via Ansible"},{"location":"AnsiblePlaybook/#nextcloud-talk-bot-setup-via-ansible","text":"This Ansible playbook playbook.yml sets up a Nextcloud Talk bot on your Nextcloud server.","title":"Nextcloud Talk Bot: Setup via Ansible"},{"location":"AnsiblePlaybook/#overview","text":"The playbook performs the following tasks: Ensure the installation directory exists. Create a Python virtual environment. Install the NextcloudTalkBot package in the virtual environment. Download the ncbot.py script from Github. Create the ncbot.sh script. Set the ownership of the ncbot.py and ncbot.sh files. Add the Nextcloud Talk command. Run the first-time setup for the bot.","title":"Overview"},{"location":"AnsiblePlaybook/#variables","text":"The playbook uses the following variables: install_directory: The path to the directory where the bot will be installed. nextcloud_directory: The path to the Nextcloud installation directory. response: The response mode for the bot (default 2: send system messages). enabled: The enabled state for the bot command (default 2: enabled for all user).","title":"Variables"},{"location":"AnsiblePlaybook/#tasks","text":"Ensure install directory exists This task creates the installation directory if it does not exist. Create virtual environment This task creates a Python virtual environment in the installation directory. Install NextcloudTalkBot in virtual environment This task installs the nextcloudtalkbot package in the virtual environment. Download ncbot.py from Github This task downloads the ncbot.py script from the Github repository and saves it in the installation directory with executable permissions. Create ncbot.sh This task creates the ncbot.sh script in the installation directory, which is a wrapper around the ncbot.py script. The script sets the correct virtual environment and Python interpreter. Set ownership of ncbot files This task sets the ownership of the ncbot.py and ncbot.sh files to the www-data user and group. Add Nextcloud Talk command This task adds the Nextcloud Talk command using the occ command-line tool. The command is registered with the bot's script, response mode, and enabled state. Run first-time setup This task runs the first-time setup for the bot by calling the ncbot.sh script with the --setup flag. The setup process configures the bot for the Nextcloud Talk instance.","title":"Tasks"},{"location":"FirstRunSetup/","text":"Nextcloud Talk Bot: First Run Setup Overview The FirstRunSetup class is designed to handle the first run setup process for a Nextcloud application. This class will prompt the user for credentials, verify them with the Nextcloud API, and store the necessary information in a local file. Usage To run the FirstRunSetup, import the wizard by from nextcloud_talk_bot.first_run_setup import FirstRunSetup FirstRunSetup.first_run() The user will be guided through the setup process, and the necessary data will be stored in a file called .nextclouddata in your home directory. The login data for the server is stored in user directory $HOME/.nextclouddata. Security The password is stored encrypted in the usepath in the .password file. The corresponding decryption password is stored in .decode. Alternatively, the decryption password can be stored in the NCDECODE environment variable and the user password in the NCPASSWORD environment variable. A mix of storing decryption password in environment variable and password in .password file or vice versa is also possible and recommended. However, since third parties can read the password with little effort as soon as they have access to your system, it is advisable not to use admin users for this package. Methods get_credentials() Executes the full setup process, verifies the credentials, and writes the data to the .nextclouddata file. check_if_data_file_already_exists() Checks if the .nextclouddata file exists. If it does, the user is prompted to confirm whether they want to continue and overwrite the file or abort the setup process. encrypt_password() This method encrypts the given password using Fernet symmetric encryption. It stores the encrypted password in a file named .password and the encryption key in a file named .decode. Examples from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot bot = NextcloudTalkBot() url = bot.NEXTCLOUD_URL username = bot.USERNAME password = bot.PASSWORD # get preferred language of user user = NextcloudUser(url, username, password) preferred_language = user.get_preferred_language() print(preferred_language) # search for activity \"event\" event = NextcloudActivities(url, username, password) search_event = event.search_last_activities(\"event\") print(search_event)","title":"First Run Setup"},{"location":"FirstRunSetup/#nextcloud-talk-bot-first-run-setup","text":"","title":"Nextcloud Talk Bot: First Run Setup"},{"location":"FirstRunSetup/#overview","text":"The FirstRunSetup class is designed to handle the first run setup process for a Nextcloud application. This class will prompt the user for credentials, verify them with the Nextcloud API, and store the necessary information in a local file.","title":"Overview"},{"location":"FirstRunSetup/#usage","text":"To run the FirstRunSetup, import the wizard by from nextcloud_talk_bot.first_run_setup import FirstRunSetup FirstRunSetup.first_run() The user will be guided through the setup process, and the necessary data will be stored in a file called .nextclouddata in your home directory. The login data for the server is stored in user directory $HOME/.nextclouddata.","title":"Usage"},{"location":"FirstRunSetup/#security","text":"The password is stored encrypted in the usepath in the .password file. The corresponding decryption password is stored in .decode. Alternatively, the decryption password can be stored in the NCDECODE environment variable and the user password in the NCPASSWORD environment variable. A mix of storing decryption password in environment variable and password in .password file or vice versa is also possible and recommended. However, since third parties can read the password with little effort as soon as they have access to your system, it is advisable not to use admin users for this package.","title":"Security"},{"location":"FirstRunSetup/#methods","text":"get_credentials() Executes the full setup process, verifies the credentials, and writes the data to the .nextclouddata file. check_if_data_file_already_exists() Checks if the .nextclouddata file exists. If it does, the user is prompted to confirm whether they want to continue and overwrite the file or abort the setup process. encrypt_password() This method encrypts the given password using Fernet symmetric encryption. It stores the encrypted password in a file named .password and the encryption key in a file named .decode.","title":"Methods"},{"location":"FirstRunSetup/#examples","text":"from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot bot = NextcloudTalkBot() url = bot.NEXTCLOUD_URL username = bot.USERNAME password = bot.PASSWORD # get preferred language of user user = NextcloudUser(url, username, password) preferred_language = user.get_preferred_language() print(preferred_language) # search for activity \"event\" event = NextcloudActivities(url, username, password) search_event = event.search_last_activities(\"event\") print(search_event)","title":"Examples"},{"location":"NextcloudActivities/","text":"Nextcloud Talk Bot: Activities This module provides the NextcloudActivities class for handling Nextcloud activities. Usage # Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via Module from nextcloud_talk_bot.nextcloud_activities import NextcloudActivities #Initialize the NextcloudActivities class: nextcloud = NextcloudActivities(base_url, username, password) #Get the last activities from Nextcloud: last_activities = nextcloud.get_last_activities() #Search for specific activities in the last activities: filtered_activities = nextcloud.search_last_activities(activity) Methods init (self, base_url, username, password, activity=None): Initializes the NextcloudActivities class. get_last_activities(self): Gets the last activities from Nextcloud. search_last_activities(self, activity): Searches for events, to-dos or file-operations in the given activities. Attributes base_url (str): The base URL of the Nextcloud instance. username (str): The username of the Nextcloud user. password (str): The password of the Nextcloud user. activity (str, optional): The activity to search for (e.g. to-do, event, shared, deleted, created, changed). Examples # Initialize the NextcloudActivities class nextcloud = NextcloudActivities('https://example.com/nextcloud', 'username', 'password') # Get the last activities from Nextcloud last_activities = nextcloud.get_last_activities() print(last_activities) # Search for to-do in latest activities activity = 'to-do' filtered_activities = nextcloud.search_last_activities(activity) print(filtered_activities)","title":"Activities"},{"location":"NextcloudActivities/#nextcloud-talk-bot-activities","text":"This module provides the NextcloudActivities class for handling Nextcloud activities.","title":"Nextcloud Talk Bot: Activities"},{"location":"NextcloudActivities/#usage","text":"# Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via Module from nextcloud_talk_bot.nextcloud_activities import NextcloudActivities #Initialize the NextcloudActivities class: nextcloud = NextcloudActivities(base_url, username, password) #Get the last activities from Nextcloud: last_activities = nextcloud.get_last_activities() #Search for specific activities in the last activities: filtered_activities = nextcloud.search_last_activities(activity)","title":"Usage"},{"location":"NextcloudActivities/#methods","text":"init (self, base_url, username, password, activity=None): Initializes the NextcloudActivities class. get_last_activities(self): Gets the last activities from Nextcloud. search_last_activities(self, activity): Searches for events, to-dos or file-operations in the given activities.","title":"Methods"},{"location":"NextcloudActivities/#attributes","text":"base_url (str): The base URL of the Nextcloud instance. username (str): The username of the Nextcloud user. password (str): The password of the Nextcloud user. activity (str, optional): The activity to search for (e.g. to-do, event, shared, deleted, created, changed).","title":"Attributes"},{"location":"NextcloudActivities/#examples","text":"# Initialize the NextcloudActivities class nextcloud = NextcloudActivities('https://example.com/nextcloud', 'username', 'password') # Get the last activities from Nextcloud last_activities = nextcloud.get_last_activities() print(last_activities) # Search for to-do in latest activities activity = 'to-do' filtered_activities = nextcloud.search_last_activities(activity) print(filtered_activities)","title":"Examples"},{"location":"NextcloudCommands/","text":"Nextcloud Talk Bot: Commands Unfortunately, in the current versions of Nextcloud Talk it is not possible to add commands via API. As a workaround, there are two scripts: setup_nextcloud_talk_bot.sh This Bash script is designed to create the necessary commands for the bot user's Nextcloud Talk Commandos automatically. The script will create a Python Venv environment in which the necessary modules are installed. After that, a Python script is downloaded from the Github repository. The script must run on a server with Nextcloud installed, and the calling user should have the ability to call commands as www-data. During the process, the script will ask for the username and password of a bot user. Please ensure that you do not use an administration account and create an app password for the bot user. If the directory where the script was started is deleted, you will have to start the setup from scratch. The script creates a wrapper for ncbot.py called ncbot.sh which has the sole purpose of starting ncbot.py via Python Venv. # Install / uninstall ./setup_nextcloud_talk.sh [--uninstall] # Setup ./setup_nextcloud_talk.sh --setup The script takes an optional --uninstall argument to uninstall the Nextcloud Talk Commando created by the script. Functions create_virtualenv() This function creates a Python Venv environment in which the necessary modules are installed. If the script is already running in a virtual environment, it will inform the user. The virtual environment is activated, and the necessary package is installed using pip. uninstall() This function uninstalls the NextcloudTalkBot package and removes the virtual environment. If the script is not running in a virtual environment, it will ask for the Nextcloud installation directory. After that, it will get the ID of the \"ncb\" command, and if it exists, it will remove it. main() This function is the main function of the script. It checks if the script is running as the 'www-data' user and creates the virtual environment. It then asks for the Nextcloud installation directory, who should see the response, and who can use the command. After that, it downloads the ncbot.py script from the Github repository and allows access for www-data to the script. It creates a ncbot.sh script that will be used to run the ncbot.py script. It then adds the ncb command to the Nextcloud Talk Commandos and starts the first run setup. Security To make the script more secure, we use the set -u option to avoid using undefined variables. We also check if the script is running in a virtual environment before executing any commands. This ensures that the script does not accidentally use the wrong version of Python or any other dependencies. ncbot.py This module provides a Python framework to call Nextcloud commands via NextcloudTalkBot. FirstSetup The FirstSetup class creates logindata for your bot users and saves them securely. See FirstRunSetup for more information about this. NextcloudCommands The NextcloudCommands class is designed to print the docstrings of classes and methods from specified modules. This class requires the following parameters which it derrives from the FirstSetup process: input_name: The name of the input used to map to a module. base_url: The base URL of your Nextcloud instance (optional). username: Your Nextcloud username (optional). password: Your Nextcloud password (optional). room_name: The name of the Nextcloud Talk room (optional). NextcloudCommands includes the following methods: map_input_to_module(): A method that maps an input name to a module. load_module(): A method that loads the module. get_first_class(): A method that retrieves the first class of the module. print_first_class_docstring(): A method that prints the docstring of the first class of the module. print_method_docstring(): A method that prints the docstring of the method. call_class_method(): A method that calls the class method with arguments. print_available_classes_and_methods(): A method that prints the available classes and methods of the module. print_method_parameters(): A method that prints the parameters of the method. print_available_classes(): A method that prints the available options. NLPCommands This class provides natural language processing (NLP) functionality to classify user intents and extract relevant information from user queries. It uses the spaCy library for NLP and includes methods to classify user intents related to polls, users, messages, activities, files, meetings, search, and calendar events. To use Spacy as a Natural Language Processor, it is necessary to download a model. python -m spacy download en_core_web_sm The command downloads the model for the English language file. Usage python ncbot.py [--function METHOD_NAME] [--args [ARGS ...]] [--help] [--list] [--setup] [input_name] The following arguments are available: input_name: The name of the input used to map to a module. --function, -f: The name of the function to call. --args, -a: The arguments to pass to the function. --help, -h: Print help. --list, -l: List available options or functions. --setup, -s: Run the first run setup. Use in the Nextcloud Talk app: The new commands are started directly in the chat with /ncb. Examples # print help /ncb -h # show list of options /ncb -l # show list of functions /ncb <option> -l # run function /ncb <option> <function> # print help to option or function /ncb <option>/<function> -h","title":"Commands"},{"location":"NextcloudCommands/#nextcloud-talk-bot-commands","text":"Unfortunately, in the current versions of Nextcloud Talk it is not possible to add commands via API. As a workaround, there are two scripts:","title":"Nextcloud Talk Bot: Commands"},{"location":"NextcloudCommands/#setup_nextcloud_talk_botsh","text":"This Bash script is designed to create the necessary commands for the bot user's Nextcloud Talk Commandos automatically. The script will create a Python Venv environment in which the necessary modules are installed. After that, a Python script is downloaded from the Github repository. The script must run on a server with Nextcloud installed, and the calling user should have the ability to call commands as www-data. During the process, the script will ask for the username and password of a bot user. Please ensure that you do not use an administration account and create an app password for the bot user. If the directory where the script was started is deleted, you will have to start the setup from scratch. The script creates a wrapper for ncbot.py called ncbot.sh which has the sole purpose of starting ncbot.py via Python Venv. # Install / uninstall ./setup_nextcloud_talk.sh [--uninstall] # Setup ./setup_nextcloud_talk.sh --setup The script takes an optional --uninstall argument to uninstall the Nextcloud Talk Commando created by the script.","title":"setup_nextcloud_talk_bot.sh"},{"location":"NextcloudCommands/#functions","text":"create_virtualenv() This function creates a Python Venv environment in which the necessary modules are installed. If the script is already running in a virtual environment, it will inform the user. The virtual environment is activated, and the necessary package is installed using pip. uninstall() This function uninstalls the NextcloudTalkBot package and removes the virtual environment. If the script is not running in a virtual environment, it will ask for the Nextcloud installation directory. After that, it will get the ID of the \"ncb\" command, and if it exists, it will remove it. main() This function is the main function of the script. It checks if the script is running as the 'www-data' user and creates the virtual environment. It then asks for the Nextcloud installation directory, who should see the response, and who can use the command. After that, it downloads the ncbot.py script from the Github repository and allows access for www-data to the script. It creates a ncbot.sh script that will be used to run the ncbot.py script. It then adds the ncb command to the Nextcloud Talk Commandos and starts the first run setup. Security To make the script more secure, we use the set -u option to avoid using undefined variables. We also check if the script is running in a virtual environment before executing any commands. This ensures that the script does not accidentally use the wrong version of Python or any other dependencies.","title":"Functions"},{"location":"NextcloudCommands/#ncbotpy","text":"This module provides a Python framework to call Nextcloud commands via NextcloudTalkBot.","title":"ncbot.py"},{"location":"NextcloudCommands/#firstsetup","text":"The FirstSetup class creates logindata for your bot users and saves them securely. See FirstRunSetup for more information about this.","title":"FirstSetup"},{"location":"NextcloudCommands/#nextcloudcommands","text":"The NextcloudCommands class is designed to print the docstrings of classes and methods from specified modules. This class requires the following parameters which it derrives from the FirstSetup process: input_name: The name of the input used to map to a module. base_url: The base URL of your Nextcloud instance (optional). username: Your Nextcloud username (optional). password: Your Nextcloud password (optional). room_name: The name of the Nextcloud Talk room (optional). NextcloudCommands includes the following methods: map_input_to_module(): A method that maps an input name to a module. load_module(): A method that loads the module. get_first_class(): A method that retrieves the first class of the module. print_first_class_docstring(): A method that prints the docstring of the first class of the module. print_method_docstring(): A method that prints the docstring of the method. call_class_method(): A method that calls the class method with arguments. print_available_classes_and_methods(): A method that prints the available classes and methods of the module. print_method_parameters(): A method that prints the parameters of the method. print_available_classes(): A method that prints the available options.","title":"NextcloudCommands"},{"location":"NextcloudCommands/#nlpcommands","text":"This class provides natural language processing (NLP) functionality to classify user intents and extract relevant information from user queries. It uses the spaCy library for NLP and includes methods to classify user intents related to polls, users, messages, activities, files, meetings, search, and calendar events. To use Spacy as a Natural Language Processor, it is necessary to download a model. python -m spacy download en_core_web_sm The command downloads the model for the English language file.","title":"NLPCommands"},{"location":"NextcloudCommands/#usage","text":"python ncbot.py [--function METHOD_NAME] [--args [ARGS ...]] [--help] [--list] [--setup] [input_name] The following arguments are available: input_name: The name of the input used to map to a module. --function, -f: The name of the function to call. --args, -a: The arguments to pass to the function. --help, -h: Print help. --list, -l: List available options or functions. --setup, -s: Run the first run setup.","title":"Usage"},{"location":"NextcloudCommands/#use-in-the-nextcloud-talk-app","text":"The new commands are started directly in the chat with /ncb.","title":"Use in the Nextcloud Talk app:"},{"location":"NextcloudCommands/#examples","text":"# print help /ncb -h # show list of options /ncb -l # show list of functions /ncb <option> -l # run function /ncb <option> <function> # print help to option or function /ncb <option>/<function> -h","title":"Examples"},{"location":"NextcloudFileOperations/","text":"Nextcloud Talk Bot: File Operations NextcloudFileOperations is designed to interact with a Nextcloud server, providing functionality to list, upload, and delete files in a user's Nextcloud folder. Initialization To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. nc_remote_folder: (Optional) The path of the remote folder on the Nextcloud server. local_folder: (Optional) The path of the local folder on the user's machine. remote_file: (Optional) The name of the remote file in the Nextcloud folder. Usage from nextcloud_talk_bot.nextcloud_file_operations import NextcloudFileOperations Methods list_files_in_nextcloud_folder() Purpose: Lists all files in a Nextcloud folder Returns: A list containing names of the files in the folder. send_local_file_to_nextcloud_folder() Purpose: Uploads local files to a specified Nextcloud folder. This method iterates through all the files in the local folder, uploads each file to the specified Nextcloud folder, and deletes the local file upon successful upload. delete_remote_file_in_nextcloud() Purpose: Deletes a remote file in the specified Nextcloud folder. This method sends a DELETE request to the Nextcloud server to remove the remote file located in the user's specified folder.","title":"Files"},{"location":"NextcloudFileOperations/#nextcloud-talk-bot-file-operations","text":"NextcloudFileOperations is designed to interact with a Nextcloud server, providing functionality to list, upload, and delete files in a user's Nextcloud folder.","title":"Nextcloud Talk Bot: File Operations"},{"location":"NextcloudFileOperations/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. nc_remote_folder: (Optional) The path of the remote folder on the Nextcloud server. local_folder: (Optional) The path of the local folder on the user's machine. remote_file: (Optional) The name of the remote file in the Nextcloud folder.","title":"Initialization"},{"location":"NextcloudFileOperations/#usage","text":"from nextcloud_talk_bot.nextcloud_file_operations import NextcloudFileOperations","title":"Usage"},{"location":"NextcloudFileOperations/#methods","text":"list_files_in_nextcloud_folder() Purpose: Lists all files in a Nextcloud folder Returns: A list containing names of the files in the folder. send_local_file_to_nextcloud_folder() Purpose: Uploads local files to a specified Nextcloud folder. This method iterates through all the files in the local folder, uploads each file to the specified Nextcloud folder, and deletes the local file upon successful upload. delete_remote_file_in_nextcloud() Purpose: Deletes a remote file in the specified Nextcloud folder. This method sends a DELETE request to the Nextcloud server to remove the remote file located in the user's specified folder.","title":"Methods"},{"location":"NextcloudMeeting/","text":"Nextcloud Talk Bot: Meeting NextcloudMeeting can be used to create and delete meeting rooms using the Nextcloud Talk API. Initialization To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. Usage # Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via module from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() Methods create_room(room_name) This method creates a new meeting room with the specified name. If the room already exists, the method will return an error message. If the room is successfully created, the method will return a success message. delete_room(room_name) This method deletes a meeting room with the specified name, after asking for confirmation. If the room does not exist, the method will return an error message. If the room is successfully deleted, the method will print a success message. Examples # create room bot.meeting.create_room(room_name=\"My Meeting Room\") # delete room bot.meeting.delete_room(room_name=\"My Meeting Room\")","title":"Meeting"},{"location":"NextcloudMeeting/#nextcloud-talk-bot-meeting","text":"NextcloudMeeting can be used to create and delete meeting rooms using the Nextcloud Talk API.","title":"Nextcloud Talk Bot: Meeting"},{"location":"NextcloudMeeting/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account.","title":"Initialization"},{"location":"NextcloudMeeting/#usage","text":"# Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via module from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot()","title":"Usage"},{"location":"NextcloudMeeting/#methods","text":"create_room(room_name) This method creates a new meeting room with the specified name. If the room already exists, the method will return an error message. If the room is successfully created, the method will return a success message. delete_room(room_name) This method deletes a meeting room with the specified name, after asking for confirmation. If the room does not exist, the method will return an error message. If the room is successfully deleted, the method will print a success message.","title":"Methods"},{"location":"NextcloudMeeting/#examples","text":"# create room bot.meeting.create_room(room_name=\"My Meeting Room\") # delete room bot.meeting.delete_room(room_name=\"My Meeting Room\")","title":"Examples"},{"location":"NextcloudMessages/","text":"Nextcloud Talk Bot: Messages NextcloudMessages provides a set of methods to interact with a Nextcloud Talk group's chat. It uses the NextcloudRequests and NextcloudTalkExtractor classes to send and receive messages. Initialization To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_name: The name of the room where messages are handled. Usage # Via bot # Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via module from nextcloud_talk_bot.nextcloud_messages import NextcloudMessages # create instance messages = NextcloudMessages(base_url=\"https://example.com/nextcloud\", username=\"user\", password=\"pass\", room=\"myroom\") Methods send_message_to_nextcloud_talk_group(message_string) Sends a message to a Nextcloud Talk group. receive_messages_of_nextcloud_talk_group(message_limit) Retrieves the last message_limit messages from a Nextcloud Talk group or mthe last \"message_limit\" number of messages (default is 1) returns: mesage dictionary with message_id and actor delete_message_in_nextcloud_talk_group(message_id) Deletes a message from a Nextcloud Talk group if message_id is provided. If not: prompts the user to select a message from the last 10 messages. Examples # send message bot.messages.send_message_to_nextcloud_talk_group(\"Hello, everyone!\") # receive jlast 10 messages bot.messages_dict = messages.receive_messages_of_nextcloud_talk_group(message_limit=10) # receives # { # id_1: (actor_1, message_1), # id_2: (actor_2, message_2), # ... #} # delete message bot.messages.delete_message_in_nextcloud_talk_group(message_id=1234)","title":"Messages"},{"location":"NextcloudMessages/#nextcloud-talk-bot-messages","text":"NextcloudMessages provides a set of methods to interact with a Nextcloud Talk group's chat. It uses the NextcloudRequests and NextcloudTalkExtractor classes to send and receive messages.","title":"Nextcloud Talk Bot: Messages"},{"location":"NextcloudMessages/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_name: The name of the room where messages are handled.","title":"Initialization"},{"location":"NextcloudMessages/#usage","text":"# Via bot # Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via module from nextcloud_talk_bot.nextcloud_messages import NextcloudMessages # create instance messages = NextcloudMessages(base_url=\"https://example.com/nextcloud\", username=\"user\", password=\"pass\", room=\"myroom\")","title":"Usage"},{"location":"NextcloudMessages/#methods","text":"send_message_to_nextcloud_talk_group(message_string) Sends a message to a Nextcloud Talk group. receive_messages_of_nextcloud_talk_group(message_limit) Retrieves the last message_limit messages from a Nextcloud Talk group or mthe last \"message_limit\" number of messages (default is 1) returns: mesage dictionary with message_id and actor delete_message_in_nextcloud_talk_group(message_id) Deletes a message from a Nextcloud Talk group if message_id is provided. If not: prompts the user to select a message from the last 10 messages.","title":"Methods"},{"location":"NextcloudMessages/#examples","text":"# send message bot.messages.send_message_to_nextcloud_talk_group(\"Hello, everyone!\") # receive jlast 10 messages bot.messages_dict = messages.receive_messages_of_nextcloud_talk_group(message_limit=10) # receives # { # id_1: (actor_1, message_1), # id_2: (actor_2, message_2), # ... #} # delete message bot.messages.delete_message_in_nextcloud_talk_group(message_id=1234)","title":"Examples"},{"location":"NextcloudMonitoring/","text":"Nextcloud Talk Bot: Monitoring NextcloudMonitoring interacts with Nextcloud's monitoring API to fetch server information. It allows users to check the current status of their Nextcloud instance, including memory usage, storage space, CPU load, and available app updates. Initialization To create an instance of the NextcloudTalkExtractor class, you will need the following information: nextcloud_url = \"https://your-nextcloud-instance.com\" monitoring_token = \"your-token-here\" # Replace with your own nc token created via ocs command on your server (this is not your bot app token!) monitoring = NextcloudMonitoring(nextcloud_url, nc_token) If the token is not provided, the class will attempt to read the token from a .monitoring file in the user's home directory. Usage # Via module from nextcloud_talk_bot.nextcloud_monitoring import NextcloudMonitoring # create instance monitoring = NextcloudMonitoring(nextcloud_url, monitoring_token) monitoring.check_monitoring() Methods get_monitoring_data_raw() Prints raw data of your Nextcloud instance check_monitoring() This method will print the memory usage, storage space, CPU load, and available app updates, along with any applicable warnings. returns: mesage dictionary with message_id and actor Warnings The check_monitoring() method will generate warnings under the following conditions: less than 20% of memory is free. the system is swapping. Less than 10 GB of storage space is free. the CPU load is greater than 10. App updates are available. Nextcloud Talk Command If you want to use monitoring via nextcloud commands, follow the steps under Commands or if you want to implement it afterwards, start the bash script with the --monitoring flag. You can manually create a token using the occ config:app:set serverinfo token --value <YourToken> command","title":"Monitoring"},{"location":"NextcloudMonitoring/#nextcloud-talk-bot-monitoring","text":"NextcloudMonitoring interacts with Nextcloud's monitoring API to fetch server information. It allows users to check the current status of their Nextcloud instance, including memory usage, storage space, CPU load, and available app updates.","title":"Nextcloud Talk Bot: Monitoring"},{"location":"NextcloudMonitoring/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: nextcloud_url = \"https://your-nextcloud-instance.com\" monitoring_token = \"your-token-here\" # Replace with your own nc token created via ocs command on your server (this is not your bot app token!) monitoring = NextcloudMonitoring(nextcloud_url, nc_token) If the token is not provided, the class will attempt to read the token from a .monitoring file in the user's home directory.","title":"Initialization"},{"location":"NextcloudMonitoring/#usage","text":"# Via module from nextcloud_talk_bot.nextcloud_monitoring import NextcloudMonitoring # create instance monitoring = NextcloudMonitoring(nextcloud_url, monitoring_token) monitoring.check_monitoring()","title":"Usage"},{"location":"NextcloudMonitoring/#methods","text":"get_monitoring_data_raw() Prints raw data of your Nextcloud instance check_monitoring() This method will print the memory usage, storage space, CPU load, and available app updates, along with any applicable warnings. returns: mesage dictionary with message_id and actor","title":"Methods"},{"location":"NextcloudMonitoring/#warnings","text":"The check_monitoring() method will generate warnings under the following conditions: less than 20% of memory is free. the system is swapping. Less than 10 GB of storage space is free. the CPU load is greater than 10. App updates are available.","title":"Warnings"},{"location":"NextcloudMonitoring/#nextcloud-talk-command","text":"If you want to use monitoring via nextcloud commands, follow the steps under Commands or if you want to implement it afterwards, start the bash script with the --monitoring flag. You can manually create a token using the occ config:app:set serverinfo token --value <YourToken> command","title":"Nextcloud Talk Command"},{"location":"NextcloudPoll/","text":"Nextcloud Talk Bot: Poll NextcloudPoll can be used to create, get, and close polls in a Nextcloud Talk room. Initialization To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_name: The name of the room where the poll will be created. question: The question for the poll. voting_options: A list of strings representing the options for the poll. max_votes: The maximum number of votes per user (default is 1). result_mode: The result mode of the poll (0 = show after vote, 1 = show always). poll_id: The ID of an existing poll to get or close. Usage # Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via Module from nextcloud_talk_bot.nextcloud_poll import NextcloudPoll # create instance poll = NextcloudPoll(base_url=\"https://example.com\", username=\"user\", password=\"password\", room_name=\"My Room\", question=\"Do you like pizza?\", voting_options=[\"Yes\", \"No\"]) Methods create_poll(question, voting_options, max_votes, result_mode) This method creates a new poll with the specified question and options in the specified Nextcloud Talk room. get_poll_result(poll_id) This method gets the result of a specific poll in the specified Nextcloud Talk room. close_poll(poll_id) This method closes a specific poll in the specified Nextcloud Talk room after asking for confirmation. Examples # create poll bot.poll.create_poll(question=\"Do you like pizza?\", voting_options=[\"Yes\", \"No\"]) # get poll result bot.poll.get_poll_result(poll_id=0) # close poll bot.poll.close_poll(poll_id=0)","title":"Poll"},{"location":"NextcloudPoll/#nextcloud-talk-bot-poll","text":"NextcloudPoll can be used to create, get, and close polls in a Nextcloud Talk room.","title":"Nextcloud Talk Bot: Poll"},{"location":"NextcloudPoll/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_name: The name of the room where the poll will be created. question: The question for the poll. voting_options: A list of strings representing the options for the poll. max_votes: The maximum number of votes per user (default is 1). result_mode: The result mode of the poll (0 = show after vote, 1 = show always). poll_id: The ID of an existing poll to get or close.","title":"Initialization"},{"location":"NextcloudPoll/#usage","text":"# Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via Module from nextcloud_talk_bot.nextcloud_poll import NextcloudPoll # create instance poll = NextcloudPoll(base_url=\"https://example.com\", username=\"user\", password=\"password\", room_name=\"My Room\", question=\"Do you like pizza?\", voting_options=[\"Yes\", \"No\"])","title":"Usage"},{"location":"NextcloudPoll/#methods","text":"create_poll(question, voting_options, max_votes, result_mode) This method creates a new poll with the specified question and options in the specified Nextcloud Talk room. get_poll_result(poll_id) This method gets the result of a specific poll in the specified Nextcloud Talk room. close_poll(poll_id) This method closes a specific poll in the specified Nextcloud Talk room after asking for confirmation.","title":"Methods"},{"location":"NextcloudPoll/#examples","text":"# create poll bot.poll.create_poll(question=\"Do you like pizza?\", voting_options=[\"Yes\", \"No\"]) # get poll result bot.poll.get_poll_result(poll_id=0) # close poll bot.poll.close_poll(poll_id=0)","title":"Examples"},{"location":"NextcloudSearch/","text":"Nextcloud Talk Bot: Search NextcloudSearch provides methods for searching Nextcloud using the Nextcloud Search API. It is designed to be used in conjunction with a Nextcloud instance, and requires authentication credentials to access the API. Initialization To create an instance of the NextcloudSarch class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. Usage # Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via Module from nextcloud_talk_bot.nextcloud_search import NextcloudSearch # create instance search = NextcloudSearch(base_url=\"https://example.com\", username=\"user\", password=\"password\") Methods get_providers() Retrieves the available search providers from the Nextcloud Search API. Returns: A list of search provider dictionaries. search(query, provider_id) Searches Nextcloud using the given query and provider ID. query: The search query. provider_id: The optional provider ID. If not provided, all available providers will be used. limit = limit of search results (default: 5) Returns: A dictionary of search results for each provider. Each key in the dictionary represents the provider ID, and the corresponding value is a list of search result dictionaries. Exceptions: Raises a ValueError exception if the specified provider ID is not found. Examples # search for \"Test\" in mails bot.search(\"Test\", \"mail\") # search for \"Test\" on all provider bot.search(\"Test\") # search for \"Test\" on provider fulltextsearch and limit results to first 5 bot.search(\"Test\", \"fulltextsearch\", limit=5)","title":"Search"},{"location":"NextcloudSearch/#nextcloud-talk-bot-search","text":"NextcloudSearch provides methods for searching Nextcloud using the Nextcloud Search API. It is designed to be used in conjunction with a Nextcloud instance, and requires authentication credentials to access the API.","title":"Nextcloud Talk Bot: Search"},{"location":"NextcloudSearch/#initialization","text":"To create an instance of the NextcloudSarch class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account.","title":"Initialization"},{"location":"NextcloudSearch/#usage","text":"# Via Bot from nextcloud_talk_bot.Nextcloudtalkbot import NextcloudTalkBot #Initialize bot: bot = NextcloudTalkBot() # Via Module from nextcloud_talk_bot.nextcloud_search import NextcloudSearch # create instance search = NextcloudSearch(base_url=\"https://example.com\", username=\"user\", password=\"password\")","title":"Usage"},{"location":"NextcloudSearch/#methods","text":"get_providers() Retrieves the available search providers from the Nextcloud Search API. Returns: A list of search provider dictionaries. search(query, provider_id) Searches Nextcloud using the given query and provider ID. query: The search query. provider_id: The optional provider ID. If not provided, all available providers will be used. limit = limit of search results (default: 5) Returns: A dictionary of search results for each provider. Each key in the dictionary represents the provider ID, and the corresponding value is a list of search result dictionaries. Exceptions: Raises a ValueError exception if the specified provider ID is not found.","title":"Methods"},{"location":"NextcloudSearch/#examples","text":"# search for \"Test\" in mails bot.search(\"Test\", \"mail\") # search for \"Test\" on all provider bot.search(\"Test\") # search for \"Test\" on provider fulltextsearch and limit results to first 5 bot.search(\"Test\", \"fulltextsearch\", limit=5)","title":"Examples"},{"location":"NextcloudTalkExtractor/","text":"Nextcloud Talk Bot: Extractor The NextcloudTalkExtractor class is a utility for interacting with the Nextcloud Talk API and extracting data. It provides methods for fetching conversations, participants, and messages for an authenticated user. Initialization: To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_id (optional): The room token for the Nextcloud chat group. message_limit (optional): The default maximum number of messages to retrieve. Usage from nextcloud_talk_bot.nextcloud_talk_extractor import NextcloudTalkExtractor Methods get_conversations_ids() Fetch the list of conversations for the authenticated user. Returns: A dictionary containing the list of conversation tokens and names. get_participants(room_id, message_limit=None) Fetch the list of participants in a specific conversation. Parameters: - room_id: The token of the conversation for which to retrieve participants. Returns: A list containing the participant display names. get_messages(room_id, message_limit=1) Purpose: Fetch the messages in a specific conversation, with an optional limit. Parameters: - room_id: The token of the conversation for which to retrieve messages. - message_limit: The maximum number of messages to retrieve (default: 100). Returns: A list containing the messages as strings. Examples from nextcloud_talk_extractor import NextcloudTalkExtractor base_url = \"https://my.nextcloud.com\" username = \"my_username\" password = \"my_password\" extractor = NextcloudTalkExtractor(base_url, username, password) # Get the list of conversations conversations = extractor.get_conversations_ids() print(conversations) # Get the participants of a specific conversation room_id = \"conversation_token\" participants = extractor.get_participants(room_id) print(participants) # Get the messages of a specific conversation messages = extractor.get_messages(room_id, message_limit=100) print(messages)","title":"Extractor"},{"location":"NextcloudTalkExtractor/#nextcloud-talk-bot-extractor","text":"The NextcloudTalkExtractor class is a utility for interacting with the Nextcloud Talk API and extracting data. It provides methods for fetching conversations, participants, and messages for an authenticated user.","title":"Nextcloud Talk Bot: Extractor"},{"location":"NextcloudTalkExtractor/#initialization","text":"To create an instance of the NextcloudTalkExtractor class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. room_id (optional): The room token for the Nextcloud chat group. message_limit (optional): The default maximum number of messages to retrieve.","title":"Initialization:"},{"location":"NextcloudTalkExtractor/#usage","text":"from nextcloud_talk_bot.nextcloud_talk_extractor import NextcloudTalkExtractor","title":"Usage"},{"location":"NextcloudTalkExtractor/#methods","text":"get_conversations_ids() Fetch the list of conversations for the authenticated user. Returns: A dictionary containing the list of conversation tokens and names. get_participants(room_id, message_limit=None) Fetch the list of participants in a specific conversation. Parameters: - room_id: The token of the conversation for which to retrieve participants. Returns: A list containing the participant display names. get_messages(room_id, message_limit=1) Purpose: Fetch the messages in a specific conversation, with an optional limit. Parameters: - room_id: The token of the conversation for which to retrieve messages. - message_limit: The maximum number of messages to retrieve (default: 100). Returns: A list containing the messages as strings.","title":"Methods"},{"location":"NextcloudTalkExtractor/#examples","text":"from nextcloud_talk_extractor import NextcloudTalkExtractor base_url = \"https://my.nextcloud.com\" username = \"my_username\" password = \"my_password\" extractor = NextcloudTalkExtractor(base_url, username, password) # Get the list of conversations conversations = extractor.get_conversations_ids() print(conversations) # Get the participants of a specific conversation room_id = \"conversation_token\" participants = extractor.get_participants(room_id) print(participants) # Get the messages of a specific conversation messages = extractor.get_messages(room_id, message_limit=100) print(messages)","title":"Examples"},{"location":"NextcloudUser/","text":"Nextcloud Talk Bot: User The NextcloudUser class represents a Nextcloud user and provides functionality to fetch user data and test user login by interacting with the Nextcloud API. Initialization To create an instance of the NextcloudUser class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account. Methods _send_request(self, endpoint) This method sends a request to the Nextcloud API and returns the response. Arguments: endpoint (str): The API endpoint to send the request to. Returns: dict: A dictionary containing the response data if the request is successful, raises an exception otherwise. test_user_login(self) This method tests user login by attempting to retrieve user data from Nextcloud using the provided credentials. Returns: dict: A dictionary containing the user's data if the login is successful, an error message otherwise. get_preferred_language(self) This method gets the user's preferred language from the Nextcloud server. Returns: str: The preferred language if the request is successful, raises an exception otherwise. get_quota(self) This method gets the user's quota information from the Nextcloud server. Returns: dict: A dictionary containing the user's quota information if the request is successful, raises an exception otherwise. Example # create an instance of the NextcloudUser class, test user login, get the user's preferred language, and fetch their quota information from nextcloud_user import NextcloudUser base_url = \"https://your-nextcloud-instance.com\" user = \"your-username\" password = \"your-password\" nc_user = NextcloudUser(base_url, user, password) login_response = nc_user.test_user_login() if \"ocs\" in login_response and \"data\" in login_response[\"ocs\"]: print(\"Login successful!\") preferred_language = nc_user.get_preferred_language() print(f\"Preferred language: {preferred_language}\") quota = nc_user.get_quota() print(f\"Quota: {quota}\") else: print(\"Login failed!\")","title":"User"},{"location":"NextcloudUser/#nextcloud-talk-bot-user","text":"The NextcloudUser class represents a Nextcloud user and provides functionality to fetch user data and test user login by interacting with the Nextcloud API.","title":"Nextcloud Talk Bot: User"},{"location":"NextcloudUser/#initialization","text":"To create an instance of the NextcloudUser class, you will need the following information: base_url: The base URL for the Nextcloud server. username: The username for the Nextcloud user account. password: The password for the Nextcloud user account.","title":"Initialization"},{"location":"NextcloudUser/#methods","text":"_send_request(self, endpoint) This method sends a request to the Nextcloud API and returns the response. Arguments: endpoint (str): The API endpoint to send the request to. Returns: dict: A dictionary containing the response data if the request is successful, raises an exception otherwise. test_user_login(self) This method tests user login by attempting to retrieve user data from Nextcloud using the provided credentials. Returns: dict: A dictionary containing the user's data if the login is successful, an error message otherwise. get_preferred_language(self) This method gets the user's preferred language from the Nextcloud server. Returns: str: The preferred language if the request is successful, raises an exception otherwise. get_quota(self) This method gets the user's quota information from the Nextcloud server. Returns: dict: A dictionary containing the user's quota information if the request is successful, raises an exception otherwise.","title":"Methods"},{"location":"NextcloudUser/#example","text":"# create an instance of the NextcloudUser class, test user login, get the user's preferred language, and fetch their quota information from nextcloud_user import NextcloudUser base_url = \"https://your-nextcloud-instance.com\" user = \"your-username\" password = \"your-password\" nc_user = NextcloudUser(base_url, user, password) login_response = nc_user.test_user_login() if \"ocs\" in login_response and \"data\" in login_response[\"ocs\"]: print(\"Login successful!\") preferred_language = nc_user.get_preferred_language() print(f\"Preferred language: {preferred_language}\") quota = nc_user.get_quota() print(f\"Quota: {quota}\") else: print(\"Login failed!\")","title":"Example"}]}